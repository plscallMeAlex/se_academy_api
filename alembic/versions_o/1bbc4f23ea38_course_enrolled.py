"""course & enrolled

Revision ID: 1bbc4f23ea38
Revises: 2da9908f80ba
Create Date: 2024-09-27 15:44:50.008439

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1bbc4f23ea38'
down_revision: Union[str, None] = '2da9908f80ba'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('category',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_category_id'), 'category', ['id'], unique=False)
    op.create_table('course',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('course_image', sa.String(), nullable=True),
    sa.Column('category_id', sa.UUID(), nullable=True),
    sa.Column('year', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(), nullable=True),
    sa.Column('total_video', sa.Integer(), nullable=True),
    sa.Column('total_duration', sa.Time(), nullable=True),
    sa.Column('enrolled', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_course_id'), 'course', ['id'], unique=False)
    op.create_table('course_video',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('course_id', sa.UUID(), nullable=True),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('video_path', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_course_video_id'), 'course_video', ['id'], unique=False)
    op.create_table('enrolled_course',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('course_id', sa.UUID(), nullable=True),
    sa.Column('enrolled_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_enrolled_course_id'), 'enrolled_course', ['id'], unique=False)
    op.create_table('enrolled_course_video',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('course_video_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Boolean(), nullable=True),
    sa.Column('timestamp', sa.Time(), nullable=True),
    sa.ForeignKeyConstraint(['course_video_id'], ['course_video.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_enrolled_course_video_id'), 'enrolled_course_video', ['id'], unique=False)
    op.create_table('user_progress',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('enrolled_course_id', sa.UUID(), nullable=True),
    sa.Column('enrolled_course_video_id', sa.UUID(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('duration', sa.Time(), nullable=True),
    sa.ForeignKeyConstraint(['enrolled_course_id'], ['enrolled_course.id'], ),
    sa.ForeignKeyConstraint(['enrolled_course_video_id'], ['enrolled_course_video.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_progress_id'), 'user_progress', ['id'], unique=False)
    op.drop_index('ix_user_history_id', table_name='user_history')
    op.drop_table('user_history')
    op.add_column('achievement', sa.Column('description', sa.String(), nullable=True))
    op.add_column('achievement', sa.Column('badge', sa.String(), nullable=True))
    op.add_column('achievement', sa.Column('category_id', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'achievement', 'category', ['category_id'], ['id'])
    op.drop_column('achievement', 'detail')
    op.drop_column('achievement', 'image')
    op.drop_column('achievement', 'type')
    op.alter_column('user', 'role',
               existing_type=sa.VARCHAR(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('user', 'status',
               existing_type=sa.VARCHAR(),
               type_=sa.String(),
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('user', 'status',
               existing_type=sa.String(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('user', 'role',
               existing_type=sa.String(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.add_column('achievement', sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('achievement', sa.Column('image', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('achievement', sa.Column('detail', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'achievement', type_='foreignkey')
    op.drop_column('achievement', 'category_id')
    op.drop_column('achievement', 'badge')
    op.drop_column('achievement', 'description')
    op.create_table('user_history',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('started_at', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('ended_at', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('started_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('stoped_time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('duration', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name='user_history_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='user_history_pkey')
    )
    op.create_index('ix_user_history_id', 'user_history', ['id'], unique=False)
    op.drop_index(op.f('ix_user_progress_id'), table_name='user_progress')
    op.drop_table('user_progress')
    op.drop_index(op.f('ix_enrolled_course_video_id'), table_name='enrolled_course_video')
    op.drop_table('enrolled_course_video')
    op.drop_index(op.f('ix_enrolled_course_id'), table_name='enrolled_course')
    op.drop_table('enrolled_course')
    op.drop_index(op.f('ix_course_video_id'), table_name='course_video')
    op.drop_table('course_video')
    op.drop_index(op.f('ix_course_id'), table_name='course')
    op.drop_table('course')
    op.drop_index(op.f('ix_category_id'), table_name='category')
    op.drop_table('category')
    # ### end Alembic commands ###
